// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

interface parity {
    function removeOwner(address _owner) external;

    function isOwner(address _addr) external view returns (bool);

    function m_numOwners() external view returns (uint256);

    function m_lastDay() external view returns (uint256);

    function resetSpentToday() external;

    function m_spentToday() external view returns (uint256);

    function addOwner(address _owner) external;

    function m_required() external view returns (uint256);

    function confirm(bytes32 _h) external returns (bool o_success);

    function initDaylimit(uint256 _limit) external;

    function setDailyLimit(uint256 _newLimit) external;

    function execute(address _to, uint256 _value, bytes memory _data) external returns (bytes32 o_hash);

    function revoke(bytes32 _operation) external;

    function changeRequirement(uint256 _newRequired) external;

    function hasConfirmed(bytes32 _operation, address _owner) external view returns (bool);

    function getOwner(uint256 ownerIndex) external view returns (address);

    function initMultiowned(address[] memory _owners, uint256 _required) external;

    function kill(address _to) external;

    function initWallet(address[] memory _owners, uint256 _required, uint256 _daylimit) external;

    function changeOwner(address _from, address _to) external;

    function m_dailyLimit() external view returns (uint256);

    fallback() external payable;

    event Confirmation(address owner, bytes32 operation);
    event Revoke(address owner, bytes32 operation);
    event OwnerChanged(address oldOwner, address newOwner);
    event OwnerAdded(address newOwner);
    event OwnerRemoved(address oldOwner);
    event RequirementChanged(uint256 newRequirement);
    event Deposit(address _from, uint256 value);
    event SingleTransact(address owner, uint256 value, address to, bytes data, address created);
    event MultiTransact(address owner, bytes32 operation, uint256 value, address to, bytes data, address created);
    event ConfirmationNeeded(bytes32 operation, address initiator, uint256 value, address to, bytes data);
}
